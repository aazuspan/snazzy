exports.styles = ee.FeatureCollection("projects/ee-aazuspan/assets/snazzy_styles");
exports.tags = require("users/aazuspan/snazzy:tags.js");

var HELP = "\
\n░░░░░░░ ░░░    ░░  ░░░░░  ░░░░░░░ ░░░░░░░ ░░    ░░ \
\n▒▒      ▒▒▒▒   ▒▒ ▒▒   ▒▒    ▒▒▒     ▒▒▒   ▒▒  ▒▒  \
\n▒▒▒▒▒▒▒ ▒▒ ▒▒  ▒▒ ▒▒▒▒▒▒▒   ▒▒▒     ▒▒▒     ▒▒▒▒   \
\n     ▓▓ ▓▓  ▓▓ ▓▓ ▓▓   ▓▓  ▓▓▓     ▓▓▓       ▓▓    \
\n███████ ██   ████ ██   ██ ███████ ███████    ██    \
\n\nInfo: https://github.com/aazuspan/snazzy\
\nStyles: https://SnazzyMaps.com\
\n\n██▓▓▒▒▒▒░░░░░░         IMPORT SNAZZY       ░░░░░░▒▒▒▒▓▓██\
\n╔═══════════════════════════════════════════════════════╗\
\n║ var snazzy = require('users/aazuspan/snazzy:styles'); ║\
\n╚═══════════════════════════════════════════════════════╝\
\n\n██▓▓▒▒▒▒░░░░░░          ADD A STYLE        ░░░░░░▒▒▒▒▓▓██\
\n╔═══════════════════════════════════════════════════════╗\
\n║ snazzy.addStyle(url, name);                           ║\
\n╚═══════════════════════════════════════════════════════╝\
\n\n██▓▓▒▒▒▒░░░░░░     ADD MULTIPLE STYLES     ░░░░░░▒▒▒▒▓▓██\
\n╔═══════════════════════════════════════════════════════╗\
\n║ snazzy.addStyles({url: name, url: name});             ║\
\n╚═══════════════════════════════════════════════════════╝\
"

exports.help = function() {
  print(HELP);
}

// Query a style by URL from the style collection and return its JSON definition
var styleFromURL = function(styleURL) {
  var style = exports.styles.filterMetadata("url", "equals", styleURL).first().getInfo()
  
  if (style == null) {
    throw "Style " + styleURL + " could not be found...";
  }
  
  return JSON.parse(style["properties"]["json"]);
}

// Added styles are automatically stored in this global
var activeStyles = {};


// Add a single style from a URL
exports.addStyle = function(url, name) {
  name = name || "User Style " + String(Object.keys(activeStyles).length + 1);
  
  // Prevent overwriting existing styles
  if (activeStyles[name] != null) {
    throw "A style with name '" + name + "' already exists! Style names must be unique.";
  }
  
  var style = styleFromURL(url);
  activeStyles[name] = style;
  
  Map.setOptions(name, activeStyles);
  return activeStyles;
}

// Add multiple styles from a mapping of URLs to names
exports.addStyles = function(styles) {
  for (var url in styles) {
    exports.addStyle(url, styles[url]);
  }
}

// Add a random style to the map
exports.surpriseMe = function(tags) {
  var tagFilter = buildCompoundTagFilter(tags);
  var styles = exports.styles.filter(tagFilter);
  
  if (styles.size().getInfo() === 0) {
    throw "No styles matched the selected tags!";
  }
  
  var rand = styles.toList(styles.size()).shuffle({seed: false}).get(0);
  var url = ee.Feature(rand).get("url").getInfo();
  
  exports.addStyle(url);
  return url;
}

// Iteratively build a filter to match against all tags in an array of tags
var buildCompoundTagFilter = function(tags) {
  // If null or empty tags are provided, create a filter that returns everything
  if (tags == null || tags.length == 0)
    return ee.Filter.always();
    
  // If tags is a single string, turn it into an array
  tags = [].concat(tags);
  
  var filter = ee.Filter.stringContains("tags", tags[0]);
  for (var i=1; i<tags.length; i++) {
    var tag = tags[i];
    if (exports.tags.indexOf(tag) === -1) {
      throw "'" + tag + "' is not a recognized tag. Choose from: " + exports.tags;
    }
    filter = ee.Filter.and(filter, ee.Filter.stringContains("tags", tag));
  }
  
  return filter;
}